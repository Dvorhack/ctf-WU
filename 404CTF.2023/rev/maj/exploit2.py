h = __import__('dis')
dico = {'adaptive': True}

from z3 import *
import re, tqdm
from maj import check
from itertools import product



cody = h.Bytecode(check, **dico).dis().count('I')

print(cody)

constraints = open('contraints2.txt').readlines()

    
dumas = []
for i in range(48):
    dumas.append(Int(f'x_{i}'))

s = Solver()

for i in range(len(dumas)):
    s.add(dumas[i] <= 0x7f)
    s.add(dumas[i] >= 0)

perm = (0,0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1)
for i,e in enumerate(perm):
    eval(constraints[i*2+e])

# for i in range(len(dumas)):
#     s.add(dumas[i] < 0xff)

s.check()
try:
    m = s.model()
except Z3Exception:
    exit(0)
print(m)
m = re.findall(b'x_(\d+) = (\d+)', str(m).encode())
m = sorted(m, key=lambda x: int(x[0].decode()))
password = ''.join([chr(int(x[1].decode())) for x in m])
print(password)
print(len(perm))
exit(0)