from z3 import *
param_1 = BitVec('param_1', 16)
param_2 = BitVec('param_2', 16)
param_3 = BitVec('param_3', 16)
param_4 = BitVec('param_4', 16)
param_5 = BitVec('param_5', 16)

a1 = param_1
a1l = a1 & 0xff
a1h = LShR(param_1, 8)
a2 = param_2
a2l = a2 & 0xff
a2h = LShR(param_2, 8)
a3 = param_3
a3l = a3 & 0xff
a3h = LShR(param_3, 8)
a4 = param_4
a4l = a4 & 0xff
a4h = LShR(param_4, 8)
a5 = param_5
a5l = a5 & 0xff
a5h = LShR(param_5, 8)

s = Solver()
s.add(param_5 == ((LShR(param_1, 1) & ((param_2 + param_2) & 0xFFFFFFFF)) ^ param_3 ^ param_4))
s.add(If((a4h ^ a1h) == 0, 1 != a3h, 0 != a3h))
s.add(If(a1l == a4l, 1!= a3h, 0!= a3h))
s.add(If(a4h ^ a2h == 0, a3l !=1,a3l != 0))
s.add(If(a2l == a4l, a3l !=1, a3l !=0))


c1 = ZeroExt(16, param_1) << 0x10 | ZeroExt(16, param_2)
c2 = ZeroExt(16, param_5) * 0xc0de
c3 = ZeroExt(16, param_3) << 0x10 | ZeroExt(16, param_4)

s.add(c3 == (c2 | ~c1) + (c1 | ~c2) - 2 * ~(c2 | c1) - 2 * (c2 & c1))
s.check()
print(s.model())
p1 = int(str(s.model()[param_1]))
p2 = int(str(s.model()[param_2]))
p3 = int(str(s.model()[param_3]))
p4 = int(str(s.model()[param_4]))
p5 = int(str(s.model()[param_5]))
print(f'{p1:04X}-{p2:04X}-{p3:04X}-{p4:04X}-{p5:04X}')